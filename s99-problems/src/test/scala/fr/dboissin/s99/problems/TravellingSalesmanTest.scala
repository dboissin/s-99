package fr.dboissin.s99.problems

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.FunSuite
import scala.util.Random
import akka.actor.Actor._
import akka.actor.ActorRef
import akka.actor.Actor
import java.util.concurrent.TimeUnit

@RunWith(classOf[JUnitRunner])
class TravellingSalesmanTest extends FunSuite {

  import fr.dboissin.s99.problems.TravellingSalesman._

  implicit val random = new Random()
  val path = List(City(0,0.223118073306978,0.216796220745891), City(85,0.214748931117356,0.231826933566481), City(24,0.190395397599787,0.203853769227862), City(202,0.161119533702731,0.188638456165791), City(199,0.145252475049347,0.130072170402855), City(80,0.103396587073803,0.128841707482934), City(232,0.069661908317357,0.109743897803128), City(206,0.08780356682837,0.091489884536713), City(234,0.07873343070969,0.077363363467157), City(240,0.111410213634372,0.089580239728093), City(76,0.059910143259913,0.030148931778967), City(112,0.070075902622193,0.165914276614785), City(125,0.068868655711412,0.168348955456167), City(160,0.083939349744469,0.221060790121555), City(171,0.123576496262103,0.239173940848559), City(88,0.123968639876693,0.255768978968263), City(5,0.153917062561959,0.261083357501775), City(51,0.176194752566516,0.253388612996787), City(61,0.181633433327079,0.28235941613093), City(92,0.20756004890427,0.285916395485401), City(32,0.168408469762653,0.318457887973636), City(153,0.177027950529009,0.348990928381681), City(6,0.189740660600364,0.360775381792337), City(37,0.207521773409098,0.338951533194631), City(242,0.124719151761383,0.333562510553747), City(58,0.114459354896098,0.33731721714139), City(155,0.106065086554736,0.337772893253714), City(213,0.105644064489752,0.304847144987434), City(203,0.110786805395037,0.303681316785514), City(193,0.120161665137857,0.288919493556023), City(249,0.081278116907924,0.306817822158337), City(227,0.068019487895072,0.355207789689302), City(113,0.083251213654876,0.393731351941824), City(150,0.023414637427777,0.396668124012649), City(94,0.014490065630525,0.392307761590928), City(39,0.001877955626696,0.417060643434525), City(134,0.023097889032215,0.319038478191942), City(126,0.102578515652567,0.478674399666488), City(110,0.083882278762758,0.492330910637975), City(44,0.040605388581753,0.532846525777131), City(8,0.084021528251469,0.589844330679625), City(124,0.084466676227748,0.610247604548931), City(243,0.023599000182003,0.620852697174996), City(73,0.015533847268671,0.693450754508376), City(19,0.064212449360639,0.716887802816927), City(86,0.056453465018421,0.748198906425387), City(139,0.103516490198672,0.757074158173054), City(28,0.169246106408536,0.741571342106909), City(204,0.180671643931419,0.760609349235892), City(208,0.230678390711546,0.734361763112247), City(231,0.251541170291603,0.766854387708008), City(221,0.259503019973636,0.817402449436486), City(123,0.30326026910916,0.776949564460665), City(98,0.323655449319631,0.715272259898484), City(108,0.277429025620222,0.69157451717183), City(241,0.265543022658676,0.668391210027039), City(23,0.242551005911082,0.662926422432065), City(87,0.240235131699592,0.635444864630699), City(34,0.245897417888045,0.541917126160115), City(38,0.226665245369077,0.450072779785842), City(177,0.300190272275358,0.421466828323901), City(210,0.33922133827582,0.409358347766101), City(173,0.343163073994219,0.391643920913339), City(223,0.338052802253515,0.38175507215783), City(41,0.385582865215838,0.354603902902454), City(67,0.353509040549397,0.320941847283393), City(109,0.306987335439771,0.291919091250747), City(146,0.326063022017479,0.236544818617404), City(233,0.270268217194825,0.232988023199141), City(167,0.32867196155712,0.174807687290013), City(131,0.415121383499354,0.179586103651673), City(183,0.443164400290698,0.160341678187251), City(192,0.432846785522997,0.139188506174833), City(164,0.454796299338341,0.101756116375327), City(230,0.424560091923922,0.094974250067025), City(91,0.420306284911931,0.046369466464967), City(156,0.452929587103426,0.031488200183958), City(17,0.452521010302007,0.030553195159882), City(3,0.474918519612402,0.033659254200757), City(166,0.498424240387976,0.026746513787657), City(49,0.511859357822686,0.044355486985296), City(71,0.533449975308031,0.008408198133111), City(226,0.556980996392667,0.035138911567628), City(53,0.592340146191418,0.012781799770892), City(45,0.614063302520663,0.026568689849228), City(99,0.64723427593708,0.015415093395859), City(172,0.661351903341711,0.072840005625039), City(65,0.652033535763621,0.100120427086949), City(35,0.648143017664552,0.13183926558122), City(211,0.615340586751699,0.120733267627656), City(224,0.608064881525934,0.147622648626566), City(7,0.622579906135798,0.166868498083204), City(229,0.660054934676737,0.24594662617892), City(187,0.648870113305748,0.258178622461855), City(237,0.62573476228863,0.288026842288673), City(137,0.595404226798564,0.326566925738007), City(144,0.555435734800994,0.350530805531889), City(72,0.578991399146616,0.375769733451307), City(64,0.606778452638537,0.374822916928679), City(132,0.631920689251274,0.369080654345453), City(239,0.669781914912164,0.318256802391261), City(84,0.691759644076228,0.292887374293059), City(190,0.734833617229015,0.327194217592478), City(143,0.784145034849644,0.295648221857846), City(181,0.789079944137484,0.268356712535024), City(136,0.827046386897564,0.279715322423726), City(154,0.828860792331398,0.280544441193342), City(60,0.870163743384182,0.329219799023122), City(219,0.807095146272331,0.343997758813202), City(52,0.786116554401815,0.383716525975615), City(196,0.781511928886175,0.388868445530534), City(107,0.776074927765876,0.413924749940634), City(212,0.798226793296635,0.460994633380324), City(10,0.778126823715866,0.496823584660888), City(97,0.756108532659709,0.478219465352595), City(165,0.691954443696886,0.478210936766118), City(120,0.682970818132162,0.508007908705622), City(207,0.61420009797439,0.520650352817029), City(102,0.610182113479823,0.487477158661932), City(2,0.569365015253425,0.473787421826273), City(129,0.566385770682245,0.525775212794542), City(195,0.599788500927389,0.577297334093601), City(22,0.578904894180596,0.600551066920161), City(116,0.592468696646392,0.656388472765684), City(148,0.605625472962856,0.704376159235835), City(105,0.571206344757229,0.72970546130091), City(70,0.540067289024591,0.763566090725362), City(169,0.523798616137356,0.785803603008389), City(66,0.534825292881578,0.828228288330138), City(201,0.539768342860043,0.852608182933182), City(235,0.576985782012343,0.808332312852144), City(128,0.644588676281273,0.856631917413324), City(40,0.653926549013704,0.874122806359082), City(175,0.677371673751622,0.890187900047749), City(138,0.672607481479645,0.898664495907724), City(152,0.676383446902037,0.930196296423674), City(189,0.649822543840855,0.948810333386064), City(184,0.623451818712056,0.966963016428053), City(130,0.58711740700528,0.97553221648559), City(121,0.616817231290042,0.889335519168526), City(247,0.698640542570502,0.848290093708783), City(18,0.76284674461931,0.927439529914409), City(11,0.792417082935572,0.944928959477693), City(48,0.798458068631589,0.951424847822636), City(15,0.841500080190599,0.959904422052205), City(197,0.845654046628624,0.984910796862096), City(25,0.872244850732386,0.968522221781313), City(245,0.866799323353916,0.931786154862493), City(13,0.828120160847902,0.897455509752035), City(77,0.865610110573471,0.869130122940987), City(93,0.915499589405954,0.893062585499138), City(119,0.936801563948393,0.887111769989133), City(30,0.985963301267475,0.879349146969616), City(4,0.954041058197618,0.958502317313105), City(82,0.957069995813072,0.745910457335413), City(114,0.881186536513269,0.730485489591956), City(191,0.838998233899474,0.698694836813956), City(178,0.856072708033025,0.66817635577172), City(62,0.809219979681075,0.6553536048159), City(170,0.786244353745133,0.629863702692091), City(36,0.760046638548374,0.626114178448915), City(149,0.733770032878965,0.628723361995071), City(26,0.70067735388875,0.664661933667958), City(135,0.662898091133684,0.706068707630038), City(142,0.651059545576572,0.69880381738767), City(78,0.685502536594868,0.728573669679463), City(103,0.700057964306325,0.734150753822178), City(74,0.713086950592697,0.73069034377113), City(158,0.730292017571628,0.73340854421258), City(174,0.80624855030328,0.742800429463387), City(194,0.807364861946553,0.604859575163573), City(54,0.833789305761456,0.594218102283776), City(75,0.848515497986227,0.583250693976879), City(63,0.862963559105992,0.607678048778325), City(141,0.925423113629222,0.611490616109222), City(168,0.956942810211331,0.50569991255179), City(185,0.946145281195641,0.409696172457188), City(31,0.865936877671629,0.447151481173933), City(217,0.858202727045864,0.503413829486817), City(214,0.749813080765307,0.250896539539099), City(14,0.736786348745227,0.244391959160566), City(180,0.769932472147048,0.176652353722602), City(127,0.773380703758448,0.17265441827476), City(246,0.778628185391426,0.118340493645519), City(145,0.821423434652388,0.142553141806275), City(27,0.913451181259006,0.140393556561321), City(157,0.949263509362936,0.10398913314566), City(176,0.963861219584942,0.10565256793052), City(21,0.977971160784364,0.075682507827878), City(83,0.959163727238774,0.169014810584486), City(90,0.986459323205054,0.177411117125303), City(9,0.961302762851119,0.20931842783466), City(117,0.953959270380437,0.202650810126215), City(20,0.885941847227514,0.218129512388259), City(59,0.715156496502459,0.155064743477851), City(220,0.729598882142454,0.059586796909571), City(104,0.743246138095856,0.0289535834454), City(209,0.809569846373051,0.038043252658099), City(57,0.842319757677615,0.00712564913556), City(186,0.596826719120145,0.069721777457744), City(140,0.508912100456655,0.172385145910084), City(228,0.496133545413613,0.173663552384824), City(50,0.493341974448413,0.160002375487238), City(198,0.506620351690799,0.288818446919322), City(79,0.476808171719313,0.292280989233404), City(16,0.461188179906458,0.289059322793037), City(179,0.484697910025716,0.310869007371366), City(42,0.538784740492702,0.299034046474844), City(122,0.499520538840443,0.392892159055918), City(161,0.428280894178897,0.410002371761948), City(46,0.412195672746748,0.480000180657953), City(55,0.429842443205416,0.487715854775161), City(1,0.447559242602438,0.492616587784141), City(12,0.439716202672571,0.504584172740579), City(47,0.47372017102316,0.580604142975062), City(96,0.521149469073862,0.577744991984218), City(244,0.507226062938571,0.683653934858739), City(43,0.494997459463775,0.708030846901238), City(162,0.457605608738959,0.750420139636844), City(56,0.468340908642858,0.815425308421254), City(115,0.409146445803344,0.889346170704812), City(225,0.419798324815929,0.947286220267415), City(33,0.477704676799476,0.931255214847624), City(216,0.342294295784086,0.974687658250332), City(147,0.322139245457947,0.957983711268753), City(205,0.252491650637239,0.915505261160433), City(68,0.211944814305753,0.945849186740816), City(248,0.228084391448647,0.968908759765327), City(106,0.206364700570703,0.99151262966916), City(218,0.163326114416122,0.968989532906562), City(188,0.142561783082783,0.992033187765628), City(222,0.151076681446284,0.873703118413687), City(236,0.136950160842389,0.836488801985979), City(29,0.037849066313356,0.906032455619425), City(100,0.008159634191543,0.861983207054436), City(118,0.143865631893277,0.654017234686762), City(81,0.392401416786015,0.638221879955381), City(111,0.409805743955076,0.605031748302281), City(133,0.382236913777888,0.775786321144551), City(89,0.328895619139075,0.837055590935051), City(151,0.334792069625109,0.850461024791002), City(238,0.710191920399666,0.963787564542145), City(159,0.399637355003506,0.285727752372622), City(163,0.367986083496362,0.063231081701815), City(69,0.333723647054285,0.04573412053287), City(101,0.24724202696234,0.064613099675626), City(200,0.255781463347375,0.091397756244987), City(182,0.203398867510259,0.117751906160265), City(95,0.185343575198203,0.117886652704328), City(215,0.434919315390289,0.005594544112682))

  test("Calculate distance between two cities.") {
    val res = distanceBetweenCities(City(0, 1, 4), City(1, 1, 1))
    assert(res == 3)
  }
  
  test("Load cities from file") {
    val res = loadFromFile(getClass.getClassLoader.getResource("defi250.csv").getFile)
    assert(res.size == 250)
  }

  test("Find path with greedy algorithm") {
    val cities = loadFromFile(getClass.getClassLoader.getResource("defi250.csv").getFile)
    val res = greedy(cities, cities.head)
    assert(res.size == 250)
  }

  test("Calculate  distance of the path") {
    val res = pathLonger(path)
    assert(res < 15 && res > 11)
  }

  test("Generate population to genetic algorithm") {
    val res = generatePopulation(path, 20)
    assert(res.size == 20)
  }

  test("Applying tournament selection on the population") {
    val res = selection(generatePopulation(path, 20), 5)
    assert(res.size == 20)
  }

  test("Find path with a genetic algorithm") {
    val cities = loadFromFile(getClass.getClassLoader.getResource("defi250.csv").getFile)
    val tsm = actorOf(new TravellingSalesmanManagement()).start()
    val fres = tsm ? SearchPath(cities, None, 1322332248587L)
    TimeUnit.SECONDS.sleep(1)

    val titi = fres.as[SearchResult].get
    println("Distance : " + titi.pathSize)
    assert(pathLonger(titi.path) < 15 && titi.path.size == 250)

    val fres1 = tsm ? SearchPath(cities, Some(titi.pathSize))
    TimeUnit.SECONDS.sleep(1)

    val toto = fres1.as[SearchResult].get
    println("Distance : " + toto.pathSize)
    assert(pathLonger(toto.path) < 14 && toto.path.size == 250)

    val fres2 = tsm ? SearchPath(cities, Some(toto.pathSize))
    TimeUnit.SECONDS.sleep(1)

    val tata = fres2.as[SearchResult].get
    println("Distance : " + tata.pathSize)
    assert(pathLonger(tata.path) < 14 && tata.path.size == 250)

    val fres3 = tsm ? SearchPath(cities, Some(tata.pathSize))
    TimeUnit.SECONDS.sleep(1)

    val tutu = fres3.as[SearchResult].get
    println("Distance : " + tutu.pathSize + " seed : " + tutu.seed)
    assert(pathLonger(tutu.path) < 13 && tutu.path.size == 250)

    tsm.stop()
  }

}
